# -*- coding: utf-8 -*-
"""ChandraVikas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mQfq2aR7mXDTu3eDitbr2tsqElymtFFJ
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib as mpl
import random
import time
#PATH PROCESS
import os
import os.path
from pathlib import Path
import glob
from scipy.io import loadmat
import nibabel as nib
import csv
#IMAGE PROCESS
from PIL import Image
from keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import cv2
from keras.applications.vgg16 import preprocess_input, decode_predictions
from keras.preprocessing import image
from skimage.feature import hessian_matrix, hessian_matrix_eigvals
from scipy.ndimage.filters import convolve
from skimage import data, io, filters
import skimage
from skimage.morphology import convex_hull_image, erosion
from IPython import display
from scipy.ndimage import gaussian_filter
from mpl_toolkits.mplot3d.art3d import Poly3DCollection
import matplotlib.patches as patches
#SCALER & TRANSFORMATION
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
#from keras.utils.np_utils import to_categorical
from sklearn.model_selection import train_test_split
from keras import regularizers
from sklearn.preprocessing import LabelEncoder
#ACCURACY CONTROL
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve
from sklearn.model_selection import GridSearchCV, cross_val_score
from sklearn.metrics import mean_squared_error, r2_score
#OPTIMIZER
from keras.optimizers import RMSprop,Adam,Optimizer,Optimizer, SGD
#MODEL LAYERS
from tensorflow.keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D,BatchNormalization,\
                        Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN,\
LSTM, GlobalAveragePooling2D, SeparableConv2D, ZeroPadding2D, Convolution2D, ZeroPadding2D,Reshape, Conv2DTranspose,\
LeakyReLU, GaussianNoise, GlobalMaxPooling2D, ReLU, Input, Concatenate
from keras import models
from keras import layers
import tensorflow as tf
from keras.applications import VGG16,VGG19,inception_v3
from keras import backend as K
from keras.utils import plot_model
from keras.datasets import mnist
import keras
from keras.models import Model
#IGNORING WARNINGS
from warnings import filterwarnings
filterwarnings("ignore",category=DeprecationWarning)
filterwarnings("ignore", category=FutureWarning)
filterwarnings("ignore", category=UserWarning)

Ground_PATH = Path("C:/Users/sharm/Downloads/archive/images/ground")
Render_PATH = Path("C:/Users/sharm/Downloads/archive/images/render")

Ground_PNG = list(Ground_PATH.glob("*.png"))
Render_PNG = list(Render_PATH.glob("*.png"))

print("GROUND LEN: ", len(Ground_PNG))
print("---"*10)
print("RENDER LEN: ", len(Render_PNG))

print("10th GROUND: ",Ground_PNG[10])
print("---"*10)
print("10th RENDER: ",Render_PNG[10])

Sorted_Ground = sorted(Ground_PNG)
Sorted_Render = sorted(Render_PNG)

print("10th GROUND: ",Sorted_Ground[10])
print("---"*10)
print("10th RENDER: ",Sorted_Render[10])

Ground_SERIES = pd.Series(Sorted_Ground,name="MASK").astype(str)
Render_SERIES = pd.Series(Sorted_Render,name="IMAGE").astype(str)

print(Ground_SERIES.head(-1))

print(Render_SERIES.head(-1))

Main_Data = pd.concat([Render_SERIES,Ground_SERIES],axis=1)

print(Main_Data.columns)

print(Main_Data.isnull().sum())

print(Main_Data.head(-1))

Bounding_Box = pd.read_csv("C:/Users/sharm/Downloads/archive/bounding_boxes.csv")

print(Bounding_Box.head(-1))

print(Bounding_Box["Frame"])

Bounding_Box = Bounding_Box.drop("Frame",axis=1)

print(Bounding_Box.head(-1))

print("EXAMPLE 1th IMAGE BOUNDING:\n",Bounding_Box.iloc[0])

print("EXAMPLE 1th IMAGE BOUNDING:\n",Bounding_Box.iloc[0].values)

print("EXAMPLE 1th IMAGE BOUNDING TYPE:\n",type(Bounding_Box.iloc[0].values))

plt.style.use("dark_background")

figure,axis = plt.subplots(1,2,figsize=(12,12))

Example_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data["IMAGE"][1]),cv2.COLOR_BGR2RGB)
Example_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data["MASK"][1]),cv2.COLOR_BGR2RGB)

axis[0].set_xlabel(Example_Picking_IMG.shape)
axis[0].set_ylabel(Example_Picking_IMG.size)
axis[0].set_title("IMAGE")
axis[0].imshow(Example_Picking_IMG)

axis[1].set_xlabel(Example_Picking_MASK.shape)
axis[1].set_ylabel(Example_Picking_MASK.size)
axis[1].set_title("MASK")
Operation_Colorbar = axis[1].imshow(Example_Picking_MASK)

figure.colorbar(Operation_Colorbar, ax=axis.ravel().tolist(), shrink=0.5,label='SEGMENTATION')

figure,axis = plt.subplots(1,2,figsize=(12,12))

Example_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data["IMAGE"][3]),cv2.COLOR_BGR2RGB)
Example_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data["MASK"][3]),cv2.COLOR_BGR2RGB)

axis[0].set_xlabel(Example_Picking_IMG.shape)
axis[0].set_ylabel(Example_Picking_IMG.size)
axis[0].set_title("IMAGE")
axis[0].imshow(Example_Picking_IMG)

axis[1].set_xlabel(Example_Picking_MASK.shape)
axis[1].set_ylabel(Example_Picking_MASK.size)
axis[1].set_title("MASK")
Operation_Colorbar = axis[1].imshow(Example_Picking_MASK)

figure.colorbar(Operation_Colorbar, ax=axis.ravel().tolist(), shrink=0.5,label='SEGMENTATION')

figure,axis = plt.subplots(1,2,figsize=(12,12))

Example_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data["IMAGE"][3000]),cv2.COLOR_BGR2RGB)
Example_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data["MASK"][3000]),cv2.COLOR_BGR2RGB)

axis[0].set_xlabel(Example_Picking_IMG.shape)
axis[0].set_ylabel(Example_Picking_IMG.size)
axis[0].set_title("IMAGE")
axis[0].imshow(Example_Picking_IMG)

axis[1].set_xlabel(Example_Picking_MASK.shape)
axis[1].set_ylabel(Example_Picking_MASK.size)
axis[1].set_title("MASK")
Operation_Colorbar = axis[1].imshow(Example_Picking_MASK)

figure.colorbar(Operation_Colorbar, ax=axis.ravel().tolist(), shrink=0.5,label='SEGMENTATION')

figure,axis = plt.subplots(1,5,figsize=(20,20))

Example_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data["IMAGE"][1]),cv2.COLOR_BGR2RGB)
Example_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data["MASK"][1]),cv2.COLOR_BGR2GRAY)

axis[0].set_xlabel(Example_Picking_IMG.shape)
axis[0].set_ylabel(Example_Picking_IMG.size)
axis[0].set_title("IMAGE")
axis[0].imshow(Example_Picking_IMG)

axis[1].set_xlabel(Example_Picking_MASK.shape)
axis[1].set_ylabel(Example_Picking_MASK.size)
axis[1].set_title("MASK")
axis[1].imshow(Example_Picking_MASK,cmap="gray")

axis[2].set_xlabel(Example_Picking_MASK.shape)
axis[2].set_ylabel(Example_Picking_MASK.size)
axis[2].set_title("MASK")
axis[2].imshow(Example_Picking_MASK,cmap="jet")

axis[3].set_xlabel(Example_Picking_MASK.shape)
axis[3].set_ylabel(Example_Picking_MASK.size)
axis[3].set_title("MASK")
axis[3].imshow(Example_Picking_MASK,cmap="hot")

axis[4].set_xlabel(Example_Picking_MASK.shape)
axis[4].set_ylabel(Example_Picking_MASK.size)
axis[4].set_title("MASK")
axis[4].imshow(Example_Picking_MASK,cmap="plasma")

figure,axis = plt.subplots(1,5,figsize=(20,20))

Example_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data["IMAGE"][10]),cv2.COLOR_BGR2RGB)
Example_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data["MASK"][10]),cv2.COLOR_BGR2GRAY)

axis[0].set_xlabel(Example_Picking_IMG.shape)
axis[0].set_ylabel(Example_Picking_IMG.size)
axis[0].set_title("IMAGE")
axis[0].imshow(Example_Picking_IMG)

axis[1].set_xlabel(Example_Picking_MASK.shape)
axis[1].set_ylabel(Example_Picking_MASK.size)
axis[1].set_title("MASK")
axis[1].imshow(Example_Picking_MASK,cmap="gray")

axis[2].set_xlabel(Example_Picking_MASK.shape)
axis[2].set_ylabel(Example_Picking_MASK.size)
axis[2].set_title("MASK")
axis[2].imshow(Example_Picking_MASK,cmap="jet")

axis[3].set_xlabel(Example_Picking_MASK.shape)
axis[3].set_ylabel(Example_Picking_MASK.size)
axis[3].set_title("MASK")
axis[3].imshow(Example_Picking_MASK,cmap="hot")

axis[4].set_xlabel(Example_Picking_MASK.shape)
axis[4].set_ylabel(Example_Picking_MASK.size)
axis[4].set_title("MASK")
axis[4].imshow(Example_Picking_MASK,cmap="plasma")

figure,axis = plt.subplots(1,5,figsize=(20,20))

Example_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data["IMAGE"][2345]),cv2.COLOR_BGR2RGB)
Example_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data["MASK"][2345]),cv2.COLOR_BGR2GRAY)

axis[0].set_xlabel(Example_Picking_IMG.shape)
axis[0].set_ylabel(Example_Picking_IMG.size)
axis[0].set_title("IMAGE")
axis[0].imshow(Example_Picking_IMG)

axis[1].set_xlabel(Example_Picking_MASK.shape)
axis[1].set_ylabel(Example_Picking_MASK.size)
axis[1].set_title("MASK")
axis[1].imshow(Example_Picking_MASK,cmap="gray")

axis[2].set_xlabel(Example_Picking_MASK.shape)
axis[2].set_ylabel(Example_Picking_MASK.size)
axis[2].set_title("MASK")
axis[2].imshow(Example_Picking_MASK,cmap="jet")

axis[3].set_xlabel(Example_Picking_MASK.shape)
axis[3].set_ylabel(Example_Picking_MASK.size)
axis[3].set_title("MASK")
axis[3].imshow(Example_Picking_MASK,cmap="hot")

axis[4].set_xlabel(Example_Picking_MASK.shape)
axis[4].set_ylabel(Example_Picking_MASK.size)
axis[4].set_title("MASK")
axis[4].imshow(Example_Picking_MASK,cmap="plasma")

figure,axis = plt.subplots(1,3,figsize=(20,20))

Example_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data["IMAGE"][2345]),cv2.COLOR_BGR2RGB)
Example_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data["MASK"][2345]),cv2.COLOR_BGR2GRAY)

Copy_IMG = Example_Picking_IMG.copy()
Copy_IMG[Example_Picking_MASK == 1] = [255,0,0]
Copy_IMG[Example_Picking_MASK == 2] = [0,0,255]
Copy_Compile_IMG = Example_Picking_IMG.copy()

Layer_Concat_IMG = cv2.addWeighted(Copy_IMG,0.5,Copy_Compile_IMG,0.3,0,Copy_Compile_IMG)

axis[0].set_xlabel(Example_Picking_IMG.shape)
axis[0].set_ylabel(Example_Picking_IMG.size)
axis[0].set_title("IMAGE")
axis[0].imshow(Example_Picking_IMG)

axis[1].set_xlabel(Example_Picking_MASK.shape)
axis[1].set_ylabel(Example_Picking_MASK.size)
axis[1].set_title("MASK")
axis[1].imshow(Example_Picking_MASK)

axis[2].set_xlabel(Layer_Concat_IMG.shape)
axis[2].set_ylabel(Layer_Concat_IMG.size)
axis[2].set_title("CONCAT")
axis[2].imshow(Layer_Concat_IMG)

figure,axis = plt.subplots(1,3,figsize=(20,20))

Example_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data["IMAGE"][3]),cv2.COLOR_BGR2RGB)
Example_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data["MASK"][3]),cv2.COLOR_BGR2GRAY)

Copy_IMG = Example_Picking_IMG.copy()
Copy_IMG[Example_Picking_MASK == 1] = [255,0,0]
Copy_IMG[Example_Picking_MASK == 2] = [0,0,255]
Copy_Compile_IMG = Example_Picking_IMG.copy()

Layer_Concat_IMG = cv2.addWeighted(Copy_IMG,0.5,Copy_Compile_IMG,0.8,0.2,Copy_Compile_IMG)

axis[0].set_xlabel(Example_Picking_IMG.shape)
axis[0].set_ylabel(Example_Picking_IMG.size)
axis[0].set_title("IMAGE")
axis[0].imshow(Example_Picking_IMG)

axis[1].set_xlabel(Example_Picking_MASK.shape)
axis[1].set_ylabel(Example_Picking_MASK.size)
axis[1].set_title("MASK")
axis[1].imshow(Example_Picking_MASK)

axis[2].set_xlabel(Layer_Concat_IMG.shape)
axis[2].set_ylabel(Layer_Concat_IMG.size)
axis[2].set_title("CONCAT")
axis[2].imshow(Layer_Concat_IMG)

figure,axis = plt.subplots(1,3,figsize=(20,20))

Example_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data["IMAGE"][12]),cv2.COLOR_BGR2RGB)
Example_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data["MASK"][12]),cv2.COLOR_BGR2GRAY)

Copy_IMG = Example_Picking_IMG.copy()
Copy_IMG[Example_Picking_MASK == 1] = [255,0,0]
Copy_IMG[Example_Picking_MASK == 2] = [0,0,255]

Copy_Compile_IMG = Example_Picking_IMG.copy()

Layer_Concat_IMG = cv2.addWeighted(Copy_IMG,0.5,Copy_Compile_IMG,0.5,0,Copy_Compile_IMG)

axis[0].set_xlabel(Example_Picking_IMG.shape)
axis[0].set_ylabel(Example_Picking_IMG.size)
axis[0].set_title("IMAGE")
axis[0].imshow(Example_Picking_IMG)

axis[1].set_xlabel(Example_Picking_MASK.shape)
axis[1].set_ylabel(Example_Picking_MASK.size)
axis[1].set_title("MASK")
axis[1].imshow(Example_Picking_MASK)

axis[2].set_xlabel(Layer_Concat_IMG.shape)
axis[2].set_ylabel(Layer_Concat_IMG.size)
axis[2].set_title("CONCAT")
axis[2].imshow(Layer_Concat_IMG)

figure,axis = plt.subplots(1,3,figsize=(20,20))

Example_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data["IMAGE"][12]),cv2.COLOR_BGR2RGB)
Example_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data["MASK"][12]),cv2.COLOR_BGR2RGB)


Layer_Concat_IMG = cv2.addWeighted(Example_Picking_IMG,0.8,Example_Picking_MASK,5.0,0.5)

axis[0].set_xlabel(Example_Picking_IMG.shape)
axis[0].set_ylabel(Example_Picking_IMG.size)
axis[0].set_title("IMAGE")
axis[0].imshow(Example_Picking_IMG)

axis[1].set_xlabel(Example_Picking_MASK.shape)
axis[1].set_ylabel(Example_Picking_MASK.size)
axis[1].set_title("MASK")
axis[1].imshow(Example_Picking_MASK)

axis[2].set_xlabel(Layer_Concat_IMG.shape)
axis[2].set_ylabel(Layer_Concat_IMG.size)
axis[2].set_title("CONCAT")
axis[2].imshow(Layer_Concat_IMG)

figure,axis = plt.subplots(1,3,figsize=(20,20))

Example_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data["IMAGE"][888]),cv2.COLOR_BGR2RGB)
Example_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data["MASK"][888]),cv2.COLOR_BGR2RGB)

Layer_Concat_IMG = cv2.addWeighted(Example_Picking_IMG,0.7,Example_Picking_MASK,2.9,1.5)

axis[0].set_xlabel(Example_Picking_IMG.shape)
axis[0].set_ylabel(Example_Picking_IMG.size)
axis[0].set_title("IMAGE")
axis[0].imshow(Example_Picking_IMG)

axis[1].set_xlabel(Example_Picking_MASK.shape)
axis[1].set_ylabel(Example_Picking_MASK.size)
axis[1].set_title("MASK")
axis[1].imshow(Example_Picking_MASK)

axis[2].set_xlabel(Layer_Concat_IMG.shape)
axis[2].set_ylabel(Layer_Concat_IMG.size)
axis[2].set_title("CONCAT")
axis[2].imshow(Layer_Concat_IMG[:,:,0],cmap="jet")

figure,axis = plt.subplots(1,3,figsize=(20,20))

Example_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data["IMAGE"][552]),cv2.COLOR_BGR2RGB)
Example_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data["MASK"][552]),cv2.COLOR_BGR2RGB)


Layer_Concat_IMG = cv2.addWeighted(Example_Picking_IMG,0.8,Example_Picking_MASK,0.4,0.5)

axis[0].set_xlabel(Example_Picking_IMG.shape)
axis[0].set_ylabel(Example_Picking_IMG.size)
axis[0].set_title("IMAGE")
axis[0].imshow(Example_Picking_IMG)

axis[1].set_xlabel(Example_Picking_MASK.shape)
axis[1].set_ylabel(Example_Picking_MASK.size)
axis[1].set_title("MASK")
axis[1].imshow(Example_Picking_MASK)

axis[2].set_xlabel(Layer_Concat_IMG.shape)
axis[2].set_ylabel(Layer_Concat_IMG.size)
axis[2].set_title("CONCAT")
axis[2].imshow(Layer_Concat_IMG[:,:,0],cmap="jet")

figure,axis = plt.subplots(1,3,figsize=(20,20))

Example_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data["IMAGE"][552]),cv2.COLOR_BGR2RGB)
Example_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data["MASK"][552]),cv2.COLOR_BGR2GRAY)

Copy_IMG = Example_Picking_IMG.copy()
Copy_IMG[Example_Picking_MASK == 255] = (255,0,255)

Layer_Concat_IMG = cv2.addWeighted(Example_Picking_IMG,0.8,Copy_IMG,0.9,0.5)

axis[0].set_xlabel(Example_Picking_IMG.shape)
axis[0].set_ylabel(Example_Picking_IMG.size)
axis[0].set_title("IMAGE")
axis[0].imshow(Example_Picking_IMG)

axis[1].set_xlabel(Example_Picking_MASK.shape)
axis[1].set_ylabel(Example_Picking_MASK.size)
axis[1].set_title("MASK")
axis[1].imshow(Example_Picking_MASK)

axis[2].set_xlabel(Layer_Concat_IMG.shape)
axis[2].set_ylabel(Layer_Concat_IMG.size)
axis[2].set_title("CONCAT")
axis[2].imshow(Layer_Concat_IMG)

print(Bounding_Box.iloc[0].values)

print(Bounding_Box.iloc[0].values[0])
print(Bounding_Box.iloc[0].values[1])
print(Bounding_Box.iloc[0].values[2])
print(Bounding_Box.iloc[0].values[3])

print(Bounding_Box.iloc[0].values.reshape(2,2))

for coordinates_x, coordinates_y in Bounding_Box.iloc[0].values.reshape(2,2):
    coordinates_x = int(coordinates_x)
    coordinates_y = int(coordinates_y)
    print(coordinates_x)
    print(coordinates_y)

for coordinates_x, coordinates_y in Bounding_Box.iloc[0].values.reshape(2,2):
    print(coordinates_x)
    print(coordinates_y)

x = Bounding_Box.iloc[2].values[0]
y = Bounding_Box.iloc[2].values[1]
t = Bounding_Box.iloc[2].values[2]
s = Bounding_Box.iloc[2].values[3]
start_point = (x, y)
end_point = (x + t, y + s)
print(start_point)
print(end_point)

figure,axis = plt.subplots(1,3,figsize=(20,20))

Example_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data["IMAGE"][2]),cv2.COLOR_BGR2RGB)
Example_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data["MASK"][2]),cv2.COLOR_BGR2GRAY)

Copy_Mask = Example_Picking_MASK.copy()
for coordinates_x, coordinates_y in Bounding_Box.iloc[2].values.reshape(2,2):
    coordinates_x = int(coordinates_x)
    coordinates_y = int(coordinates_y)
    cv2.drawMarker(Copy_Mask, (coordinates_x, coordinates_y), (255, 0, 0),thickness=5)

axis[0].set_xlabel(Example_Picking_IMG.shape)
axis[0].set_ylabel(Example_Picking_IMG.size)
axis[0].set_title("IMAGE")
axis[0].imshow(Example_Picking_IMG)

axis[1].set_xlabel(Example_Picking_MASK.shape)
axis[1].set_ylabel(Example_Picking_MASK.size)
axis[1].set_title("MASK")
axis[1].imshow(Example_Picking_MASK)

axis[2].set_xlabel(Copy_Mask.shape)
axis[2].set_ylabel(Copy_Mask.size)
axis[2].set_title("CONCAT")
axis[2].imshow(Copy_Mask)

figure,axis = plt.subplots(1,3,figsize=(20,20))

Example_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data["IMAGE"][0]),cv2.COLOR_BGR2RGB)
Example_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data["MASK"][0]),cv2.COLOR_BGR2GRAY)

Copy_Mask = Example_Picking_MASK.copy()

x = Bounding_Box.iloc[0].values[0]
y = Bounding_Box.iloc[0].values[1]
t = Bounding_Box.iloc[0].values[2]
s = Bounding_Box.iloc[0].values[3]


Copy_Mask = Example_Picking_MASK.copy()

Marker_Image = cv2.drawMarker(Copy_Mask, (int(x), int(y)), (255, 0, 0),thickness=5)
cv2.putText(Copy_Mask, "ROCK", (int(x), int(y)), cv2.FONT_HERSHEY_COMPLEX_SMALL, 2, (255, 0, 0), 2)

axis[0].set_xlabel(Example_Picking_IMG.shape)
axis[0].set_ylabel(Example_Picking_IMG.size)
axis[0].set_title("IMAGE")
axis[0].imshow(Example_Picking_IMG)

axis[1].set_xlabel(Example_Picking_MASK.shape)
axis[1].set_ylabel(Example_Picking_MASK.size)
axis[1].set_title("MASK")
axis[1].imshow(Example_Picking_MASK)

axis[2].set_xlabel(Marker_Image.shape)
axis[2].set_ylabel(Marker_Image.size)
axis[2].set_title("CONCAT")
axis[2].imshow(Marker_Image)

figure,axis = plt.subplots(1,3,figsize=(20,20))

Example_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data["IMAGE"][1]),cv2.COLOR_BGR2RGB)
Example_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data["MASK"][1]),cv2.COLOR_BGR2GRAY)

Copy_Mask = Example_Picking_MASK.copy()

x = Bounding_Box.iloc[1].values[0]
y = Bounding_Box.iloc[1].values[1]
t = Bounding_Box.iloc[1].values[2]
s = Bounding_Box.iloc[1].values[3]


Copy_Mask = Example_Picking_MASK.copy()

Marker_Image = cv2.drawMarker(Copy_Mask, (int(x), int(y)), (255, 0, 0),thickness=5)
cv2.putText(Copy_Mask, "ROCK", (int(x), int(y)), cv2.FONT_HERSHEY_COMPLEX_SMALL, 2, (255, 0, 0), 2)
axis[0].set_xlabel(Example_Picking_IMG.shape)
axis[0].set_ylabel(Example_Picking_IMG.size)
axis[0].set_title("IMAGE")
axis[0].imshow(Example_Picking_IMG)

axis[1].set_xlabel(Example_Picking_MASK.shape)
axis[1].set_ylabel(Example_Picking_MASK.size)
axis[1].set_title("MASK")
axis[1].imshow(Example_Picking_MASK)

axis[2].set_xlabel(Marker_Image.shape)
axis[2].set_ylabel(Marker_Image.size)
axis[2].set_title("CONCAT")
axis[2].imshow(Marker_Image)

figure,axis = plt.subplots(1,3,figsize=(20,20))

Example_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data["IMAGE"][1]),cv2.COLOR_BGR2RGB)
Example_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data["MASK"][1]),cv2.COLOR_BGR2RGB)

Copy_Mask = Example_Picking_MASK.copy()

x = Bounding_Box.iloc[1].values[0]
y = Bounding_Box.iloc[1].values[1]
t = Bounding_Box.iloc[1].values[2]
s = Bounding_Box.iloc[1].values[3]

Copy_Mask = Example_Picking_MASK.copy()

Rec_IMG = cv2.rectangle(Copy_Mask, (int(x), int(y)), (int(x + t), int(y + s)), (255, 255, 0), 5)
cv2.putText(Copy_Mask, "ROCK", (int(x), int(y)), cv2.FONT_HERSHEY_COMPLEX_SMALL, 2, (255, 0, 0), 2)

axis[0].set_xlabel(Example_Picking_IMG.shape)
axis[0].set_ylabel(Example_Picking_IMG.size)
axis[0].set_title("IMAGE")
axis[0].imshow(Example_Picking_IMG)

axis[1].set_xlabel(Example_Picking_MASK.shape)
axis[1].set_ylabel(Example_Picking_MASK.size)
axis[1].set_title("MASK")
axis[1].imshow(Example_Picking_MASK)

axis[2].set_xlabel(Rec_IMG.shape)
axis[2].set_ylabel(Rec_IMG.size)
axis[2].set_title("CONCAT")
axis[2].imshow(Rec_IMG)

figure,axis = plt.subplots(1,figsize=(20,20))

Example_Picking_IMG = cv2.cvtColor(cv2.imread(Main_Data["IMAGE"][0]),cv2.COLOR_BGR2RGB)
Example_Picking_MASK = cv2.cvtColor(cv2.imread(Main_Data["MASK"][0]),cv2.COLOR_BGR2RGB)

Bound_Coor = []
with open("/content/drive/MyDrive/archive/bounding_boxes.csv") as bounding_boxes_csv:
    CSV_Reader = csv.reader(bounding_boxes_csv, delimiter=',')
    next(bounding_boxes_csv)
    for rows in CSV_Reader:
        if rows[0] == '1':
            Bound_Coor.append(rows[1:5])
        else:
            break
axis.imshow(Example_Picking_MASK)

for bounding_coor in Bound_Coor:
    bounding_box = list(map(float, bounding_coor))
    Rect_Image = patches.Rectangle((bounding_box[0]-0.5,bounding_box[1]-0.5),
                             bounding_box[2],bounding_box[3],
                             linewidth=4,
                             edgecolor='r',facecolor='none')
    axis.add_patch(Rect_Image)

Main_Data_Reduced = Main_Data[0:1000]

print(Main_Data_Reduced.head(-1))

Image_List = []
Transformation_List = []

for image_x,mask_x in zip(Main_Data_Reduced.IMAGE.values,Main_Data_Reduced.MASK.values):

    Picking_IMG = cv2.cvtColor(cv2.imread(image_x),cv2.COLOR_BGR2RGB)
    Picking_MASK = cv2.cvtColor(cv2.imread(mask_x),cv2.COLOR_BGR2RGB)
    Layer_Concat_IMG = cv2.addWeighted(Picking_IMG,0.8,Picking_MASK,5.0,0.5)

    Resized_Image = cv2.resize(Picking_IMG,(256,256))
    Resized_Transformation = cv2.resize(Layer_Concat_IMG,(256,256))

    Resized_Image = Resized_Image / 255.
    Resized_Transformation = Resized_Transformation / 255.

    Image_List.append(Resized_Image)
    Transformation_List.append(Resized_Transformation)

print("ARRAY IMAGE SHAPE: ",np.shape(np.array(Image_List)))
print("ARRAY MASK SHAPE: ",np.shape(np.array(Transformation_List)))

figure,axis = plt.subplots(1,2,figsize=(10,10))

axis[0].imshow(Transformation_List[10])
axis[0].set_xlabel(Transformation_List[10].shape)
axis[0].set_title("MASK")
axis[1].imshow(Image_List[10])
axis[1].set_xlabel(Image_List[10].shape)
axis[1].set_title("LUNAR")

figure,axis = plt.subplots(1,2,figsize=(10,10))

axis[0].imshow(Transformation_List[100])
axis[0].set_xlabel(Transformation_List[100].shape)
axis[0].set_title("MASK")
axis[1].imshow(Image_List[100])
axis[1].set_xlabel(Image_List[100].shape)
axis[1].set_title("LUNAR")

figure,axis = plt.subplots(1,2,figsize=(10,10))

axis[0].imshow(Transformation_List[450])
axis[0].set_xlabel(Transformation_List[450].shape)
axis[0].set_title("MASK")
axis[1].imshow(Image_List[450])
axis[1].set_xlabel(Image_List[450].shape)
axis[1].set_title("LUNAR")

Train_Set = np.array(Image_List,dtype="float32")
Transformation_Set = np.array(Transformation_List,dtype="float32")

print("TRAIN SHAPE: ",Train_Set.shape)
print("TRANSFORMATION SHAPE: ",Transformation_Set.shape)
print("---"*10)
print("TRAIN DTYPE: ",Train_Set.dtype)
print("TRANSFORMATION DTYPE: ",Transformation_Set.dtype)

compile_loss = "binary_crossentropy"
compile_optimizer = Adam(lr=0.0001)
output_class = 1

Checkpoint_Model = tf.keras.callbacks.ModelCheckpoint(monitor="val_accuracy",
                                                      save_best_only=True,
                                                      save_weights_only=True,
                                                      filepath="./modelcheck")

# E_AE = Sequential()
# #
# E_AE.add(Conv2D(32,(2,2),kernel_initializer = 'he_normal',use_bias = True, padding="same"))
# E_AE.add(BatchNormalization())
# E_AE.add(ReLU())
# #
# E_AE.add(Conv2D(64,(2,2),kernel_initializer = 'he_normal',use_bias = True, padding="same"))
# E_AE.add(BatchNormalization())
# E_AE.add(ReLU())
# #
# E_AE.add(Conv2D(128,(5,5),kernel_initializer = 'he_normal',use_bias = True, padding="same"))
# E_AE.add(BatchNormalization())
# E_AE.add(ReLU())

#
#
#
# D_AE = Sequential()
# #
# D_AE.add(Conv2DTranspose(64,(2,2), padding="same"))
# D_AE.add(ReLU())
# #
# D_AE.add(Conv2DTranspose(32,(5,5), padding="same"))
# D_AE.add(ReLU())
# #
# D_AE.add(Conv2DTranspose(output_class,(5,5), padding="same"))
# D_AE.add(ReLU())
# input_shape = (None,256,256,1)
#
# # Build the model
# D_AE.build(input_shape)
# D_AE.build()

# from keras.models import Sequential
# from keras.layers import Conv2DTranspose, ReLU, Conv2D, BatchNormalization
#
# D_AE = Sequential()
# D_AE.add(Conv2DTranspose(64, (2, 2), padding="same"))
# D_AE.add(ReLU())
# D_AE.add(Conv2DTranspose(32, (5, 5), padding="same"))
# D_AE.add(ReLU())
# D_AE.add(Conv2DTranspose(output_class, (5, 5), padding="same"))
# D_AE.add(ReLU())
# input_shape = (64,256,256,1)
#
# # Build the model
# D_AE.build(input_shape)
# D_AE.build()
#
# E_AE = Sequential()
# #
# E_AE.add(Conv2D(32,(2,2),kernel_initializer = 'he_normal',use_bias = True, padding="same"))
# E_AE.add(BatchNormalization())
# E_AE.add(ReLU())
# #
# E_AE.add(Conv2D(64,(2,2),kernel_initializer = 'he_normal',use_bias = True, padding="same"))
# E_AE.add(BatchNormalization())
# E_AE.add(ReLU())
# #
# E_AE.add(Conv2D(128,(5,5),kernel_initializer = 'he_normal',use_bias = True, padding="same"))
# E_AE.add(BatchNormalization())
# E_AE.add(ReLU())
# input_shape = (None,256,256,1)
#
# # Build the model
# E_AE.build(input_shape)
# E_AE.build()
#
# print(D_AE.summary())

print(E_AE.summary())

from keras.models import Sequential
from keras.layers import Conv2DTranspose, ReLU, Conv2D, BatchNormalization

D_AE = Sequential()
D_AE.add(Conv2DTranspose(64, (2, 2), padding="same"))
D_AE.add(ReLU())
D_AE.add(Conv2DTranspose(32, (5, 5), padding="same"))
D_AE.add(ReLU())
D_AE.add(Conv2DTranspose(output_class, (5, 5), padding="same"))
D_AE.add(ReLU())

# No need to explicitly build the model here, as it will be automatically built when you use it with actual data

E_AE = Sequential()
E_AE.add(Conv2D(32, (2, 2), kernel_initializer='he_normal', use_bias=True, padding="same"))
E_AE.add(BatchNormalization())
E_AE.add(ReLU())
E_AE.add(Conv2D(64, (2, 2), kernel_initializer='he_normal', use_bias=True, padding="same"))
E_AE.add(BatchNormalization())
E_AE.add(ReLU())
E_AE.add(Conv2D(128, (5, 5), kernel_initializer='he_normal', use_bias=True, padding="same"))
E_AE.add(BatchNormalization())
E_AE.add(ReLU())

# No need to explicitly build the model here, as it will be automatically built when you use it with actual data

Auto_Encoder = Sequential([E_AE,D_AE])
Auto_Encoder.compile(loss=compile_loss,optimizer=compile_optimizer,metrics=["mse"])



Model_AutoEncoder = Auto_Encoder.fit(Train_Set,Transformation_Set,epochs=55,callbacks=[Checkpoint_Model])

Model_AutoEncoder.save('model.h5')

print(Auto_Encoder.summary())

print(Auto_Encoder.layers)

print(Model_AutoEncoder.params)

Prediction_MASK_Seen = Auto_Encoder.predict(Train_Set[:10])

figure,axis = plt.subplots(1,2,figsize=(14,14))
pre_img_number = 1

Original_Img = Train_Set[pre_img_number]
Predict_Mask = Prediction_MASK_Seen[pre_img_number]

axis[0].imshow(Original_Img)
axis[0].set_xlabel(Original_Img.shape)
axis[0].set_ylabel(Original_Img.size)
axis[0].set_title("IMAGE")
axis[1].imshow(Predict_Mask)
axis[1].set_xlabel(Predict_Mask.shape)
axis[1].set_ylabel(Predict_Mask.size)
axis[1].set_title("PREDICTION")

figure,axis = plt.subplots(1,2,figsize=(14,14))
pre_img_number = 2

Original_Img = Train_Set[pre_img_number]
Predict_Mask = Prediction_MASK_Seen[pre_img_number]

axis[0].imshow(Original_Img)
axis[0].set_xlabel(Original_Img.shape)
axis[0].set_ylabel(Original_Img.size)
axis[0].set_title("IMAGE")
axis[1].imshow(Predict_Mask)
axis[1].set_xlabel(Predict_Mask.shape)
axis[1].set_ylabel(Predict_Mask.size)
axis[1].set_title("PREDICTION")

figure,axis = plt.subplots(1,2,figsize=(14,14))
pre_img_number = 3

Original_Img = Train_Set[pre_img_number]
Predict_Mask = Prediction_MASK_Seen[pre_img_number]

axis[0].imshow(Original_Img)
axis[0].set_xlabel(Original_Img.shape)
axis[0].set_ylabel(Original_Img.size)
axis[0].set_title("IMAGE")
axis[1].imshow(Predict_Mask)
axis[1].set_xlabel(Predict_Mask.shape)
axis[1].set_ylabel(Predict_Mask.size)
axis[1].set_title("PREDICTION")

figure,axis = plt.subplots(1,2,figsize=(14,14))
pre_img_number = 8

Original_Img = Train_Set[pre_img_number]
Predict_Mask = Prediction_MASK_Seen[pre_img_number]

axis[0].imshow(Original_Img)
axis[0].set_xlabel(Original_Img.shape)
axis[0].set_ylabel(Original_Img.size)
axis[0].set_title("IMAGE")
axis[1].imshow(Predict_Mask)
axis[1].set_xlabel(Predict_Mask.shape)
axis[1].set_ylabel(Predict_Mask.size)
axis[1].set_title("PREDICTION")

figure,axis = plt.subplots(1,2,figsize=(14,14))
pre_img_number = 9

Original_Img = Train_Set[pre_img_number]
Predict_Mask = Prediction_MASK_Seen[pre_img_number]

axis[0].imshow(Original_Img)
axis[0].set_xlabel(Original_Img.shape)
axis[0].set_ylabel(Original_Img.size)
axis[0].set_title("IMAGE")
axis[1].imshow(Predict_Mask)
axis[1].set_xlabel(Predict_Mask.shape)
axis[1].set_ylabel(Predict_Mask.size)
axis[1].set_title("PREDICTION")

Reading_IMG = cv2.cvtColor(cv2.imread("/content/output.png"),cv2.COLOR_BGR2RGB)
Reading_IMG = cv2.resize(Reading_IMG,(256,256))

print(Reading_IMG.shape)

Reading_IMG_Shape = Reading_IMG.reshape(1,Reading_IMG.shape[0],Reading_IMG.shape[1],Reading_IMG.shape[2])

figure = plt.figure(figsize=(10,10))

plt.imshow(Reading_IMG)

MASK_Seen = Auto_Encoder.predict(Reading_IMG_Shape)

figure,axis = plt.subplots(1,2,figsize=(14,14))

axis[0].imshow(Reading_IMG)
axis[0].set_xlabel(Reading_IMG.shape)
axis[0].set_ylabel(Reading_IMG.size)
axis[0].set_title("IMAGE")
axis[0].axis("off")
axis[1].imshow(MASK_Seen[0])
axis[1].set_xlabel(MASK_Seen[0].shape)
axis[1].set_ylabel(MASK_Seen[0].size)
axis[1].set_title("PREDICTION")
axis[1].axis("off")

Real_Lunar_Photos = Path("/content/drive/MyDrive/archive/real_moon_images")
List_Real_Photos = list(Real_Lunar_Photos.glob(r"*.png"))

print(List_Real_Photos[1])

List_Real_Photos = pd.Series(List_Real_Photos,name="TARGET").astype(str)

figure,axis = plt.subplots(6,6,figsize=(14,14))

for indexing,operations in enumerate(axis.flat):

    Picking_Real_IMG = List_Real_Photos[indexing]
    Reading_IMG = cv2.cvtColor(cv2.imread(Picking_Real_IMG),cv2.COLOR_BGR2RGB)
    Reading_IMG = cv2.resize(Reading_IMG,(256,256))
    Reading_IMG_Shape = Reading_IMG.reshape(1,Reading_IMG.shape[0],Reading_IMG.shape[1],Reading_IMG.shape[2])
    MASK_Prediction = Auto_Encoder.predict(Reading_IMG_Shape)

    operations.axis("off")
    operations.imshow(MASK_Prediction[0])

plt.tight_layout()
plt.show()

figure,axis = plt.subplots(6,6,figsize=(14,14))

for indexing,operations in enumerate(axis.flat):

    Picking_Real_IMG = List_Real_Photos[indexing]
    Reading_IMG = cv2.cvtColor(cv2.imread(Picking_Real_IMG),cv2.COLOR_BGR2RGB)
    Reading_IMG = cv2.resize(Reading_IMG,(256,256))
    Reading_IMG_Shape = Reading_IMG.reshape(1,Reading_IMG.shape[0],Reading_IMG.shape[1],Reading_IMG.shape[2])
    MASK_Prediction = Auto_Encoder.predict(Reading_IMG_Shape)

    operations.axis("off")
    operations.imshow(MASK_Prediction[0],cmap="jet")

plt.tight_layout()
plt.show()

figure,axis = plt.subplots(6,6,figsize=(14,14))

for indexing,operations in enumerate(axis.flat):

    Picking_Real_IMG = List_Real_Photos[indexing]
    Reading_IMG = cv2.cvtColor(cv2.imread(Picking_Real_IMG),cv2.COLOR_BGR2RGB)
    Reading_IMG = cv2.resize(Reading_IMG,(256,256))
    Reading_IMG_Shape = Reading_IMG.reshape(1,Reading_IMG.shape[0],Reading_IMG.shape[1],Reading_IMG.shape[2])
    MASK_Prediction = Auto_Encoder.predict(Reading_IMG_Shape)

    operations.axis("off")
    operations.imshow(MASK_Prediction[0],cmap="hot")

plt.tight_layout()
plt.show()

