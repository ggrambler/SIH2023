# -*- coding: utf-8 -*-
"""Elevation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18mxPsSo4XPysXZk_fZ2ruhaRDcAUioLX
"""

# Install Required Libraries
!pip install rasterio
!pip install matplotlib
!pip install numpy

# List files in the current directory to find your image
import os
os.listdir()

# Assuming the image is in the "/content" directory
image_folder = "/content"
file_name = "Sr960Merged.tif"  # Replace with the actual image file name

# Visualize Elevation Data
import rasterio
from rasterio.plot import show
import matplotlib.pyplot as plt
import numpy as np

file_path = os.path.join(image_folder, file_name)

with rasterio.open(file_path) as src:
    elevation_data = src.read(1)

# Display Elevation Map
plt.figure(figsize=(10, 8))
show(elevation_data, cmap='Oranges', title='Elevation Map (Spectral Colormap)')
plt.show()

# Calculate Slope
from rasterio.plot import show_hist
from rasterio.enums import Resampling
from rasterio.windows import get_data_window

def calculate_slope(dx, dy):
    slope = np.arctan(np.sqrt(dx**2 + dy**2))
    return np.degrees(slope)

# Compute the gradient in the x and y directions
dx, dy = np.gradient(elevation_data, src.res[0], src.res[1])

# Calculate slope
slope = calculate_slope(dx, dy)

# Display Slope Map
plt.figure(figsize=(10, 8))
show(slope, cmap='viridis', title='Slope Map (Viridis Colormap)')
plt.show()

# Calculate Shadow
def calculate_shadow(slope, elevation_data):
    shadow_mask = slope > 5  # Adjust the threshold as needed
    shadow_data = np.where(shadow_mask, elevation_data, np.nan)
    return shadow_data

# Calculate shadow based on slope
shadow_data = calculate_shadow(slope, elevation_data)

# Display Shadow Map
plt.figure(figsize=(10, 8))
show(shadow_data, cmap='gray', title='Shadow Map')
plt.show()